name: "\U0001F680 Release  Auto (Build + Bench + Notes + Notify)"

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag name (e.g., v1.0.0-beta.1)"
        required: true
      channel:
        description: "beta | production"
        required: true
        default: "beta"
  push:
    tags:
      - "v*.*.*"
      - "v*.*.*-beta.*"

permissions:
  contents: write
  actions: read

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-bench:
    name: Build & Benchmark
    runs-on: ubuntu-latest
    timeout-minutes: 40
    outputs:
      sha_dash: ${{ steps.sha_dash.outputs.hash }}
      sha_ext: ${{ steps.sha_ext.outputs.hash }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6
        with:
          node-version: "22.19.0"
          cache: "pnpm"
      - uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4
        with:
          version: 9

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Stamp Version & Flags
        run: |
          pnpm node scripts/version-stamp.mjs
          pnpm node scripts/flags-stamp.mjs

      - name: Build Dashboard
        run: pnpm -F @lumen-guardian/dashboard build

      - name: Archive Dashboard
        run: tar -czf dashboard-dist.tgz -C packages/dashboard/dist .

      - id: sha_dash
        name: Compute Dashboard SHA256
        run: echo "hash=$(sha256sum dashboard-dist.tgz | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Build Extension
        run: pnpm -F @lumen-guardian/extension build && pnpm -F @lumen-guardian/extension zip

      - id: sha_ext
        name: Compute Extension SHA256
        run: echo "hash=$(sha256sum packages/extension/*.zip | head -n1 | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Run Bench (NDJSON)
        env:
          JSON_OUTPUT: "1"
          BENCH_FORCE_EXIT: "1"
        run: pnpm bench:buffer:json:force | tee bench-buffer.json

      - name: Extract Bench Summary
        run: pnpm node scripts/extract-bench-summary.mjs bench-buffer.json

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: release-artifacts
          path: |
            dashboard-dist.tgz
            packages/extension/*.zip
            version.json
            feature-flags.json
            bench-buffer.json
            bench-summary.env

  release:
    name: Create Release & Upload
    runs-on: ubuntu-latest
    needs: build-bench
    timeout-minutes: 20
    env:
      SHA_DASHBOARD: ${{ needs.build-bench.outputs.sha_dash }}
      SHA_EXTENSION: ${{ needs.build-bench.outputs.sha_ext }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          name: release-artifacts
          path: ./artifacts

      - name: Generate Release Notes
        run: |
          cp ./artifacts/version.json .
          pnpm node scripts/gen-release-notes.mjs

      - name: Create or Update Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${{ github.event.inputs.tag || github.ref_name }}
          gh release create "$TAG" --title "$TAG" --notes-file RELEASE_NOTES.md || \
          gh release edit "$TAG" --notes-file RELEASE_NOTES.md

      - name: Upload Assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${{ github.event.inputs.tag || github.ref_name }}
          gh release upload "$TAG" ./artifacts/dashboard-dist.tgz ./artifacts/*.zip --clobber

  notify:
    name: Notify Channels
    runs-on: ubuntu-latest
    needs: release
    timeout-minutes: 5
    steps:
      - name: Send Slack Notification
        if: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          MSG="✅ Guardian ${GITHUB_REF_NAME} released — see GitHub Releases."
          curl -s -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MSG\"}" \
            "${{ secrets.SLACK_WEBHOOK_URL }}" || true

      - name: Send Discord Notification
        if: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          MSG="✅ Guardian ${GITHUB_REF_NAME} released — see GitHub Releases."
          curl -s -H "Content-Type: application/json" -X POST \
            -d "{\"content\":\"$MSG\"}" \
            "${{ secrets.DISCORD_WEBHOOK_URL }}" || true
