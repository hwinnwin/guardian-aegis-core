name: CD â€¢ Dashboard

on:
  workflow_dispatch:
    inputs:
      channel:
        description: "beta | production"
        required: true
        default: "beta"

env:
  APP_VERSION: ${{ github.ref_name }}

jobs:
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    permissions: { contents: read }
    outputs:
      sha256: ${{ steps.hash.outputs.sha256 }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6
        with: { node-version: '22.19.0', cache: 'pnpm' }
      - uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4
        with: { version: 9 }

      - run: pnpm install --frozen-lockfile
      - run: pnpm run version:stamp
      - run: pnpm run build:dashboard
      - run: tar -C packages/dashboard/dist -czf dashboard-dist.tgz .
      - id: hash
        run: echo "sha256=$( (command -v shasum >/dev/null && shasum -a 256 dashboard-dist.tgz || sha256sum dashboard-dist.tgz) | awk '{print $1}' )" >> "$GITHUB_OUTPUT"
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with: { name: dashboard-dist, path: "dashboard-dist.tgz
version.json" }

  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ inputs.channel }}
    permissions: { contents: read, deployments: write }
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with: { name: dashboard-dist, path: ./art }
      - name: Verify SHA
        run: |
          calc=$( (command -v shasum >/dev/null && shasum -a 256 art/dashboard-dist.tgz || sha256sum art/dashboard-dist.tgz) | awk '{print $1}')
          want="${{ needs.build.outputs.sha256 }}"
          echo "calc=$calc | want=$want"
          [ "$calc" = "$want" ] || { echo "::error::SHA mismatch"; exit 1; }
      - name: Deploy via Vercel CLI
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ (inputs.channel == 'production') && secrets.VERCEL_PROJECT_ID_PROD || secrets.VERCEL_PROJECT_ID_BETA }}
        run: |
          npm i -g vercel@latest
          vercel pull --yes --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID"
          vercel deploy art/dashboard-dist.tgz --prebuilt --archive=tgz --yes --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" \
            $([[ "${{ inputs.channel }}" == "production" ]] && echo "--prod" || true)
