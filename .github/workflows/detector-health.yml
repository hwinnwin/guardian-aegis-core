name: "ðŸ§  Detector Health Score"

on:
  workflow_run:
    workflows:
      - "ðŸ§ª Detector CI"
    types:
      - completed

permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read

concurrency:
  group: detector-health-${{ github.event.workflow_run.id }}
  cancel-in-progress: true

jobs:
  aggregate:
    runs-on: ubuntu-latest
    timeout-minutes: 6

    steps:
      - name: Download artifacts metadata
        id: artifacts
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # v7.1.0
        with:
          result-encoding: string
          script: |
            const run = context.payload.workflow_run;
            const { data: arts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: run.id
            });
            const payload = (arts.artifacts || []).map(a => ({ id: a.id, name: a.name }));
            return JSON.stringify(payload);

      - name: Pull artifacts to workspace
        if: steps.artifacts.outputs.result != ''
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # v7.1.0
        with:
          result-encoding: string
          artifacts: ${{ steps.artifacts.outputs.result }}
          script: |
            const entries = JSON.parse(core.getInput('artifacts') || '[]');
            const fs = require('fs');
            const cp = require('child_process');
            const path = require('path');
            if (!Array.isArray(entries) || entries.length === 0) {
              core.info('No artifacts discovered.');
              return;
            }
            fs.mkdirSync('artifacts', { recursive: true });
            for (const item of entries) {
              const out = path.join('artifacts', `${item.name}.zip`);
              const res = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: item.id,
                archive_format: 'zip'
              });
              fs.writeFileSync(out, Buffer.from(res.data));
              cp.execSync(`unzip -o ${out} -d artifacts/${item.name}`, { stdio: 'inherit' });
            }

      - name: Normalize coverage
        if: always()
        run: |
          mkdir -p artifacts/normalized
          SRC="$(find artifacts -name 'coverage-summary.json' -print -quit)"
          if [ -n "$SRC" ] && [ -f "$SRC" ]; then
            jq '.' "$SRC" > artifacts/normalized/coverage.json
          else
            echo '{}' > artifacts/normalized/coverage.json
          fi

      - name: Normalize bench
        if: always()
        run: |
          mkdir -p artifacts/normalized
          SRC="$(find artifacts -name 'bench.json' -print -quit)"
          if [ -n "$SRC" ] && [ -f "$SRC" ]; then
            jq '.' "$SRC" > artifacts/normalized/bench.json
          else
            echo '{}' > artifacts/normalized/bench.json
          fi

      - name: Read lint result
        if: always()
        run: |
          mkdir -p artifacts/normalized
          SRC="$(find artifacts -name 'lint.json' -print -quit)"
          if [ -n "$SRC" ] && [ -f "$SRC" ]; then
            cp "$SRC" artifacts/normalized/lint.json
          else
            echo '{"ok":true,"errorCount":0}' > artifacts/normalized/lint.json
          fi

      - name: Compute Detector Health Score
        id: score
        shell: bash
        run: |
          COV=$(jq -r '.total.line.pct // .total.lines.pct // .pct // 0' artifacts/normalized/coverage.json 2>/dev/null || echo 0)
          BEN=$(jq -r '.deterministic_ratio // .score // 0' artifacts/normalized/bench.json 2>/dev/null || echo 0)
          LINT=$(jq -r '.score // (if (.passed // 0) == 1 then 100 else 0 end)' artifacts/normalized/lint.json 2>/dev/null || echo 0)
          SCORE=$(COV="$COV" BEN="$BEN" LINT="$LINT" python3 - <<'PY'
import os
c = float(os.environ.get("COV", "0"))
b = float(os.environ.get("BEN", "0"))
l = float(os.environ.get("LINT", "0"))
print(f"{(0.2*l + 0.4*c + 0.4*b):.2f}")
PY
)
          THRESH=99.90
          STATUS=success
          LABEL="PASS"
          awk -v s="$SCORE" -v t="$THRESH" 'BEGIN{if(s<t){print "failure"}else{print "success"}}' > status.txt
          if [ "$(cat status.txt)" != "success" ]; then
            STATUS=failure
            LABEL="ADVISORY/FAIL"
          fi
          echo "score=$SCORE" >> "$GITHUB_OUTPUT"
          echo "status=$STATUS" >> "$GITHUB_OUTPUT"
          echo "label=$LABEL" >> "$GITHUB_OUTPUT"

      - name: Emit Detector Health check
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # v7.1.0
        with:
          script: |
            const run = context.payload.workflow_run;
            const sha = run.head_sha;
            const score = core.getInput('score') || '${{ steps.score.outputs.score }}';
            const status = core.getInput('status') || '${{ steps.score.outputs.status }}';
            const label = core.getInput('label') || '${{ steps.score.outputs.label }}';
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Detector Health',
              head_sha: sha,
              status: 'completed',
              conclusion: status,
              output: {
                title: `Detector Health: ${score}% (${label})`,
                summary: 'Lint/Coverage/Bench aggregated. Threshold â‰¥ 99.90%.'
              }
            });

      - name: Sticky PR comment (update or create)
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # v7.1.0
        with:
          script: |
            const run = context.payload.workflow_run;
            const { data: prs } = await github.rest.search.issuesAndPullRequests({
              q: `${run.head_sha} repo:${context.repo.owner}/${context.repo.repo} is:pr`
            });
            const pr = prs.items?.[0];
            if (!pr) {
              core.info('No PR match for head SHA; skipping comment.');
              return;
            }
            const marker = '<!-- DETECTOR_HEALTH -->';
            const score = '${{ steps.score.outputs.score }}';
            const label = '${{ steps.score.outputs.label }}';
            const body = [
              marker,
              '### ðŸ§  Detector Health',
              '',
              `Score: **${score}%**`,
              `Status: **${label}** (threshold â‰¥ 99.90%)`,
              marker
            ].join('\n');
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              per_page: 100
            });
            const prev = comments.find(c => c.user?.type === 'Bot' && c.body?.includes(marker));
            if (prev) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: prev.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body
              });
            }
