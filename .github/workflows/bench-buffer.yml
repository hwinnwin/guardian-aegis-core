# NOTE:
# - We intentionally DO NOT use `cache: pnpm` on actions/setup-node.
# - pnpm caching is handled by pnpm/action-setup (below) after Node is installed.
# - This avoids brittle probes for pnpm on fresh runners and keeps installs deterministic.

name: Buffer Bench & Validate

on:
  pull_request:
    branches: ['**']
    paths:
      - 'packages/buffer/**'
      - 'scripts/**'
      - '.github/workflows/bench-buffer.yml'
      - 'package.json'
      - 'pnpm-lock.yaml'
  workflow_dispatch: {}

jobs:
  bench-macos:
    name: macOS bench (authoritative)
    runs-on: macos-latest
    timeout-minutes: 20
    permissions:
      contents: read
    concurrency:
      group: bench-buffer-${{ github.head_ref || github.ref }}
      cancel-in-progress: true
    env:
      JSON_OUTPUT: "1"
      BENCH_FORCE_EXIT: "1"
      CI: "true"
      BENCH_THR_MIN: ${{ vars.BENCH_THR_MIN }}
      BENCH_P95_MAX_MS: ${{ vars.BENCH_P95_MAX_MS }}
      BENCH_MEM_PER_OP_MAX: ${{ vars.BENCH_MEM_PER_OP_MAX }}
      BENCH_RSS_MAX_MB: ${{ vars.BENCH_RSS_MAX_MB }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Node
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v4.0.3
        with:
          node-version: '22.19.0'

      - name: Setup pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.0.0
        with:
          version: 9
          run_install: false

      - name: Restore pnpm store cache
        uses: actions/cache@13aac22a282a93b5f802e124fdef6833b5066a2d # v4.0.2
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Smoke deterministic exit (optional fast guard)
        run: pnpm bench:buffer:smoke

      - name: Prepare helpers (5m guard + diagnostics)
        shell: bash
        run: |
          mkdir -p .github/scripts
          cat > .github/scripts/ci_helpers.sh <<'SH'
          set -Eeuo pipefail
          run5() {
            local log="$1"; shift
            : > "$log"
            ( "$@" ) > >(tee -a "$log") 2> >(tee -a "$log" >&2) &
            local cmd_pid=$!
            (
              for i in $(seq 1 300); do
                if ! kill -0 "$cmd_pid" 2>/dev/null; then exit 0; fi
                sleep 1
              done
              echo "::error::Step exceeded 5 minutes, killing PID $cmd_pid"
              kill -9 "$cmd_pid" 2>/dev/null || true
              exit 124
            ) &
            local watchdog_pid=$!
            wait "$cmd_pid"; local rc=$?
            kill "$watchdog_pid" 2>/dev/null || true
            if [ $rc -ne 0 ]; then
              echo "----- FAILURE DIAGNOSTICS ($log) -----"
              grep -m1 -Ei '(^|[^a-zA-Z])(error|fail|exception|traceback)([^a-zA-Z]|$)' "$log" || true
              echo "----- LAST 30 LINES -----"
              tail -n 30 "$log" || true
            fi
            return $rc
          }
          run5_with_tee() {
            local log="$1"; local out="$2"; shift 2
            : > "$log"; : > "$out"
            ( "$@" ) > >(tee -a "$log" | tee "$out") 2> >(tee -a "$log" >&2) &
            local cmd_pid=$!
            (
              for i in $(seq 1 300); do
                if ! kill -0 "$cmd_pid" 2>/dev/null; then exit 0; fi
                sleep 1
              done
              echo "::error::Step exceeded 5 minutes, killing PID $cmd_pid"
              kill -9 "$cmd_pid" 2>/dev/null || true
              exit 124
            ) &
            local watchdog_pid=$!
            wait "$cmd_pid"; local rc=$?
            kill "$watchdog_pid" 2>/dev/null || true
            if [ $rc -ne 0 ]; then
              echo "----- FAILURE DIAGNOSTICS ($log) -----"
              grep -m1 -Ei '(^|[^a-zA-Z])(error|fail|exception|traceback)([^a-zA-Z]|$)' "$log" || true
              echo "----- LAST 30 LINES -----"
              tail -n 30 "$log" || true
            fi
            return $rc
          }
          SH

      - name: Run JSON benchmark (forced, 5m cap; NDJSON -> bench-buffer.json)
        shell: bash
        run: |
          bash -Eeuo pipefail -c ". .github/scripts/ci_helpers.sh; run5_with_tee bench-run.log bench-buffer.json pnpm bench:buffer:json:force"
          cp bench-run.log bench-buffer.out || true

      - name: Hash artifacts (JSON only)
        if: always()
        shell: bash
        run: |
          if [ -f bench-buffer.json ]; then
            (command -v shasum >/dev/null && shasum -a 256 bench-buffer.json || sha256sum bench-buffer.json) | awk '{print $1}' > bench-buffer.sha256
            echo "bench-buffer.json SHA256: $(cat bench-buffer.sha256)"
          else
            echo "bench-buffer.json missing; skipping hash."
          fi
      - name: Upload artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: buffer-bench
          path: |
            bench-buffer.json
            bench-buffer.out
            bench-buffer.sha256
            packages/buffer/BENCHMARKS.md
          if-no-files-found: warn
          retention-days: 14

      - name: Hash artifacts (optional)
        if: always()
        shell: bash
        run: |
          if [ -f bench-buffer.json ]; then
            (command -v shasum >/dev/null && shasum -a 256 bench-buffer.json) || sha256sum bench-buffer.json
          else
            echo "bench-buffer.json missing; skip hash"
          fi

  validate-linux:
    name: Linux validate + PR comment
    runs-on: ubuntu-latest
    needs: bench-macos
    if: always()
    timeout-minutes: 10
    permissions:
      contents: read
      pull-requests: write
    env:
      BENCH_THR_MIN: ${{ vars.BENCH_THR_MIN }}
      BENCH_P95_MAX_MS: ${{ vars.BENCH_P95_MAX_MS }}
      BENCH_MEM_PER_OP_MAX: ${{ vars.BENCH_MEM_PER_OP_MAX }}
      BENCH_RSS_MAX_MB: ${{ vars.BENCH_RSS_MAX_MB }}
    steps:
      - name: Checkout (for scripts only)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Node
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v4.0.3
        with:
          node-version: '22.19.0'

      - name: Setup pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.0.0
        with:
          version: 9
          run_install: false

      - name: Restore pnpm store cache
        uses: actions/cache@13aac22a282a93b5f802e124fdef6833b5066a2d # v4.0.2
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: Install deps (for validator)
        run: pnpm install --frozen-lockfile

      - name: Download macOS bench artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: buffer-bench
          path: ./bench-artifacts
        continue-on-error: true

      - name: Prepare helpers (5m guard + diagnostics)
        shell: bash
        run: |
          mkdir -p .github/scripts
          cat > .github/scripts/ci_helpers.sh <<'SH'
          set -Eeuo pipefail
          run5() {
            local log="$1"; shift
            : > "$log"
            ( "$@" ) > >(tee -a "$log") 2> >(tee -a "$log" >&2) &
            local cmd_pid=$!
            (
              for i in $(seq 1 300); do
                if ! kill -0 "$cmd_pid" 2>/dev/null; then exit 0; fi
                sleep 1
              done
              echo "::error::Step exceeded 5 minutes, killing PID $cmd_pid"
              kill -9 "$cmd_pid" 2>/dev/null || true
              exit 124
            ) &
            local watchdog_pid=$!
            wait "$cmd_pid"; local rc=$?
            kill "$watchdog_pid" 2>/dev/null || true
            if [ $rc -ne 0 ]; then
              echo "----- FAILURE DIAGNOSTICS ($log) -----"
              grep -m1 -Ei '(^|[^a-zA-Z])(error|fail|exception|traceback)([^a-zA-Z]|$)' "$log" || true
              echo "----- LAST 30 LINES -----"
              tail -n 30 "$log" || true
            fi
            return $rc
          }
          SH

      - name: Validate artifact SHA (Linux, 5m cap)
        shell: bash
        run: |
          . .github/scripts/ci_helpers.sh
          if [ ! -f ./bench-artifacts/bench-buffer.json ] || [ ! -f ./bench-artifacts/bench-buffer.sha256 ]; then
            echo "Missing bench artifacts for SHA validation"; exit 1
          fi
          cd bench-artifacts
          calc="$( (command -v shasum >/dev/null && shasum -a 256 bench-buffer.json || sha256sum bench-buffer.json) | awk '{print $1}' )"
          want="$(cat bench-buffer.sha256 | tr -d '\n\r')"
          echo "Computed: $calc"
          echo "Expected: $want"
          test "$calc" = "$want" || { echo "::error::Artifact SHA mismatch"; exit 1; }
          cd ..
      - name: Validate metrics (Linux, 5m cap)
        shell: bash
        run: |
          . .github/scripts/ci_helpers.sh
          if [ -f ./bench-artifacts/bench-buffer.json ]; then
            run5 validate-run.log node scripts/check-bench-json.mjs ./bench-artifacts/bench-buffer.json
          else
            echo "bench-buffer.json artifact not found; benchmarking job may have failed." | tee -a validate-run.log
            exit 1
          fi

      - name: Comment summary on PR (sticky with run link + artifact SHA256)
        if: ${{ always() && github.event_name == 'pull_request' }}
        uses: actions/github-script@f28e40c7f34bde8b3046d885e986cb6290c5673b # v7.1.0
        with:
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const runId = context.runId;
            const artifactUrl = `https://github.com/${owner}/${repo}/actions/runs/${runId}`;
            const f = './bench-artifacts/bench-buffer.json';
            const h = './bench-artifacts/bench-buffer.sha256';
            const sha = fs.existsSync(h) ? fs.readFileSync(h, 'utf8').trim() : 'n/a';
            let body;
            if (fs.existsSync(f)) {
              const lines = fs.readFileSync(f, 'utf8').trim().split('\n');
              const records = lines.map(l => { try { return JSON.parse(l); } catch { return null; } }).filter(Boolean);
              const summary = [...records].reverse().find(r => r.type === 'summary') ?? records.at(-1);
              const m = summary?.metrics ?? {};
              const thr = m.throughputPerSec !== undefined ? m.throughputPerSec.toLocaleString(undefined, {maximumFractionDigits: 0}) : 'n/a';
              const p95 = m.latency?.p95Ms !== undefined ? m.latency.p95Ms.toFixed(3) + ' ms' : 'n/a';
              const mem = m.memory?.bytesPerInteraction !== undefined ? m.memory.bytesPerInteraction.toFixed(0) + ' B' : 'n/a';
              const rss = m.rssPeakMB !== undefined ? m.rssPeakMB.toFixed(2) + ' MB' : 'n/a';
              body = [
                `### 🧪 Buffer Bench Summary (macOS run)`,
                '',
                `**Throughput:** ${thr} ops/s`,
                `**p95 Latency:** ${p95}`,
                `**Memory/op:** ${mem}`,
                `**Peak RSS:** ${rss}`,
                `**JSON SHA256:** \`${sha}\``,
                '',
                `[Artifacts & logs](${artifactUrl})`,
                '',
                '_Workflow: Buffer Bench & Validate_',
                '<!-- bench-buffer-summary -->'
              ].join('\n');
            } else {
              body = [
                `### ⚠️ Buffer Bench Summary`,
                '',
                `Benchmark artifact not found (macOS job may have failed).`,
                `[Run page](${artifactUrl})`,
                '',
                '_Workflow: Buffer Bench & Validate_',
                '<!-- bench-buffer-summary -->'
              ].join('\n');
            }
            const issue_number = context.issue.number;
            const existing = await github.rest.issues.listComments({ owner, repo, issue_number, per_page: 100 });
            const prev = existing.data.find(c => c.user?.type === 'Bot' && c.body?.includes('<!-- bench-buffer-summary -->'));
            if (prev) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: prev.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number, body });
            }
