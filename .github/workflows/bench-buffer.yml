name: Buffer Bench & Validate

on:
  pull_request:
    branches: ['**']
    paths:
      - 'packages/buffer/**'
      - 'scripts/**'
      - '.github/workflows/bench-buffer.yml'
      - 'package.json'
      - 'pnpm-lock.yaml'
  workflow_dispatch: {}

jobs:
  bench-macos:
    name: macOS bench (authoritative)
    runs-on: macos-latest
    permissions:
      contents: read
    concurrency:
      group: bench-buffer-${{ github.ref }}
      cancel-in-progress: true
    env:
      JSON_OUTPUT: "1"
      BENCH_FORCE_EXIT: "1"
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.19.0'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Smoke deterministic exit
        run: pnpm bench:buffer:smoke

      - name: Run JSON benchmark (forced)
        run: pnpm bench:buffer:json:force | tee bench-buffer.json

      - name: Stamp BENCHMARKS metadata
        run: node scripts/update-bench-metadata.mjs || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: buffer-bench
          path: |
            bench-buffer.json
            bench-buffer.out
            packages/buffer/BENCHMARKS.md
          if-no-files-found: warn
          retention-days: 14

  validate-linux:
    name: Linux validate + PR comment
    runs-on: ubuntu-latest
    needs: bench-macos
    permissions:
      contents: read
      pull-requests: write
    env:
      BENCH_THR_MIN: ${{ vars.BENCH_THR_MIN }}
      BENCH_P95_MAX_MS: ${{ vars.BENCH_P95_MAX_MS }}
      BENCH_MEM_PER_OP_MAX: ${{ vars.BENCH_MEM_PER_OP_MAX }}
      BENCH_RSS_MAX_MB: ${{ vars.BENCH_RSS_MAX_MB }}
    steps:
      - name: Checkout (for scripts only)
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.19.0'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install deps (for validator)
        run: pnpm install --frozen-lockfile

      - name: Download macOS bench artifacts
        uses: actions/download-artifact@v4
        with:
          name: buffer-bench
          path: ./bench-artifacts

      - name: Validate metrics (Linux)
        run: node scripts/check-bench-json.mjs ./bench-artifacts/bench-buffer.json

      - name: Comment summary on PR (sticky)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const filePath = './bench-artifacts/bench-buffer.json';
            if (!fs.existsSync(filePath)) {
              core.warning('bench-buffer.json not found in artifact; skipping PR comment.');
              return;
            }
            const lines = fs.readFileSync(filePath, 'utf8').trim().split('\n');
            const records = lines.map(line => { try { return JSON.parse(line); } catch { return null; } }).filter(Boolean);
            const summary = [...records].reverse().find(record => record.type === 'summary') ?? records.at(-1);
            if (!summary) {
              core.warning('No summary object found in bench-buffer.json; skipping PR comment.');
              return;
            }
            const metrics = summary.metrics ?? summary;
            const throughput = metrics.throughputPerSec !== undefined
              ? metrics.throughputPerSec.toLocaleString(undefined, { maximumFractionDigits: 0 })
              : 'n/a';
            const p95 = metrics.latency?.p95Ms !== undefined ? metrics.latency.p95Ms.toFixed(3) + ' ms' : 'n/a';
            const memory = metrics.memory?.bytesPerInteraction !== undefined ? metrics.memory.bytesPerInteraction.toFixed(0) + ' B' : 'n/a';
            const rss = metrics.rssPeakMB !== undefined ? metrics.rssPeakMB.toFixed(2) + ' MB' : 'n/a';
            const body = [
              '### ðŸ§ª Buffer Bench Summary (macOS run)',
              '',
              `**Throughput:** ${throughput} ops/s`,
              `**p95 Latency:** ${p95}`,
              `**Memory/op:** ${memory}`,
              `**Peak RSS:** ${rss}`,
              '',
              '_Workflow: Buffer Bench & Validate_',
              '<!-- bench-buffer-summary -->'
            ].join('\n');
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const existing = await github.rest.issues.listComments({ owner, repo, issue_number, per_page: 100 });
            const previous = existing.data.find(comment => comment.user?.type === 'Bot' && comment.body?.includes('<!-- bench-buffer-summary -->'));
            if (previous) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: previous.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number, body });
            }
